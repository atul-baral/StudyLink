@model IEnumerable<StudyLink.Domain.Entities.QuestionType>

@{
    ViewData["Title"] = "Question Types";
}

<style>
    .card {
        box-shadow: 0px 0rem 1rem 0px rgba(0, 0, 0, 0.175) !important;
        border: 1px solid #ddd !important;
        transition: transform 0.3s ease;
        cursor: default;
    }

    .content-above h4 {
        font-size: 1.5rem;
    }

    .card-body {
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        height: 100%;
    }

    .card-title {
        flex-grow: 1;
        font-weight: bold;
    }

    .btn-container {
        margin-top: auto;
        display: flex;
        gap: 10px;
        justify-content: center;
        flex-wrap: wrap;
    }

    .btn-questions {
        background-color: #007bff;
        color: white;
        border: none;
    }

    #questionPopup .popup-content {
        max-height: 80vh;
        overflow-y: auto;
    }
</style>

<div class="container my-5">
    <div class="content-above text-center mb-5">
        <h4 class="display-4 font-weight-light">Select a Question Type</h4>
        <p class="lead text-muted">Manage question types with the options below.</p>
    </div>

    <div class="row justify-content-center">
        @foreach (var type in Model)
        {
            <div class="col-md-3 col-sm-6 mb-4">
                <div class="card shadow-lg border-0 rounded-lg bg-white text-center p-4">
                    <div class="card-body d-flex flex-column align-items-center">
                        <h5 class="card-title text-primary mb-3">@type.TypeName</h5>
                        <div class="btn-container">
                            @if (!type.SubjectQuestionTypes.Any(s => s.IsPublished))
                            {
                                <a asp-action="Index" asp-controller="Question" asp-area="Teacher" asp-route-questionTypeId="@type.QuestionTypeId"
                                   class="btn btn-primary btn-sm">
                                    Add Question
                                </a>
                            }
                            else
                            {
                                <a href="javascript:void(0);" onclick="loadQuestionList(@type.QuestionTypeId, '/Teacher/Question/GetQuestionListForView')"
                                   class="btn btn-primary btn-sm">
                                    Questions
                                </a>

                                <a asp-action="GetStudentResults" asp-controller="Question" asp-area="Teacher" asp-route-questionTypeId="@type.QuestionTypeId"
                                   class="btn btn-success btn-sm">
                                    Answers
                                </a>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>


<div id="questionPopup" style="display: none;">
    <div id="questionContentWrapper" style="max-height: 80vh; overflow-y: auto;">
        <div id="questionContent"></div>
    </div>
</div>

@section Scripts {
    <script>
        function loadQuestionList(questionTypeId, url) {
            $.ajax({
                url: url,
                type: "GET",
                data: { questionTypeId: questionTypeId },
                dataType: "json",
                success: function(response) {
                    if (response && response.success && Array.isArray(response.data)) {
                        let htmlContent = buildQuestionHtml(response.data);
                        showQuestionPopup(htmlContent);
                    } else {
                        console.error("Data is missing or not an array:", response);
                        alert("Failed to load question data.");
                    }
                },
                error: function(xhr, status, error) {
                    console.error("AJAX Error:", status, error);
                    console.error("Response Text:", xhr.responseText);
                }
            });
        }

        function buildQuestionHtml(data) {
            let htmlContent = "";
            let choiceLabels = ["A", "B", "C", "D"];
            data.forEach((question, qIndex) => {
                htmlContent += `
                    <div class="card mb-4 border-0 shadow-sm">
                        <div class="card-body">
                            <h5 class="mb-3 fw-bold">Q${qIndex + 1}. ${question.questionText}</h5>
                            <div class="row g-2">
                `;

                question.choices.forEach((choice, i) => {
                    let choiceLabel = choiceLabels[i];
                    let isCorrect = choice.isCorrect;
                    let cssClass = isCorrect ? "list-group-item-success" : "list-group-item-light";
                    let truncatedChoiceText = truncateText(choice.choiceText, 20);

                    htmlContent += `
                        <div class="col-md-6">
                            <div class="list-group-item ${cssClass} d-flex justify-content-start align-items-center p-3 rounded">
                                <span class="fw-bold me-2">${choiceLabel}.</span>
                                <span class="flex-grow-1">${truncatedChoiceText}</span>
                    `;

                    if (isCorrect) {
                        htmlContent += `<span class="badge bg-success">✔</span>`;
                    }

                    htmlContent += `</div></div>`;
                });

                htmlContent += `</div></div></div>`;
            });
            return htmlContent;
        }

        function truncateText(text, maxLength) {
            return text.length > maxLength ? text.substring(0, maxLength) + "..." : text;
        }

        function showQuestionPopup(contentHtml) {
            var questionPopup = $("#questionPopup").dxPopup({
                title: "Question List",
                width: 700,
                height: "auto",
                visible: false,
                closeOnOutsideClick: true,
                showCloseButton: true,
                contentTemplate: function(contentElement) {
                    contentElement.append('<div id="questionContentWrapper" style="max-height: 80vh; overflow-y: auto;"><div id="questionContent"></div></div>');
                }
            }).dxPopup("instance");

            questionPopup.show();
            $("#questionContent").html(contentHtml);
        }
    </script>
}