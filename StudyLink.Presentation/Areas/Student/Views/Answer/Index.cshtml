@model List<StudyLink.Application.ViewModels.AddAnswerVM>

@{
    ViewData["Title"] = "Quiz";
}

<h2>Quiz</h2>

<div id="timer" class="mt-4" style="font-size: 20px; font-weight: bold;">Time Remaining: <span id="timer-display">00:00</span></div>

<form id="quiz-form" action="@Url.Action("AddAnswer", "Answer")" method="post">
    <div id="question-container" class="mt-4"></div>
    <div id="navigation-buttons" class="mt-4">
        <div id="prev-btn"></div>
        <div id="next-btn"></div>
        <div id="submit-btn"></div>
    </div>
</form>

@section Scripts {
    <script>
        let questions = @Html.Raw(Json.Serialize(Model));
        let userAnswers = {};
        let currentQuestionIndex = 0;
        let countdownTimer;
        let timeLeftInSeconds = 60 * 10;

        function updateTimer() {
            let minutes = Math.floor(timeLeftInSeconds / 60);
            let seconds = timeLeftInSeconds % 60;
            $("#timer-display").text(`${minutes < 10 ? '0' : ''}${minutes}:${seconds < 10 ? '0' : ''}${seconds}`);

            if (timeLeftInSeconds <= 0) {
                clearInterval(countdownTimer);
                alert("Time's up! The quiz will be submitted automatically.");
                $("#quiz-form").submit();
            } else {
                timeLeftInSeconds--;
            }
        }

        function startTimer() {
            countdownTimer = setInterval(updateTimer, 1000);
        }

        function renderQuestion() {
            let question = questions[currentQuestionIndex];

            let questionHtml = `
                <div class="card mb-4">
                    <div class="card-header">
                        <strong>Q${currentQuestionIndex + 1}: </strong>${question.questionText}
                    </div>
                    <div class="card-body">
                        <div id="radio-group-${question.questionId}" class="row"></div>
                    </div>
                </div>
            `;

            $("#question-container").html(questionHtml);

            $(`#radio-group-${question.questionId}`).dxRadioGroup({
                items: question.choices.map((choice, index) => ({
                    value: choice.choiceId,
                    text: `${String.fromCharCode(65 + index)}. ${choice.choiceText}`
                })),
                displayExpr: "text",
                valueExpr: "value",
                value: userAnswers[question.questionId] || null,
                onValueChanged: (e) => {
                    userAnswers[question.questionId] = e.value;
                }
            });

            $("#prev-btn").dxButton({
                text: "Previous",
                visible: currentQuestionIndex > 0,
                onClick: () => {
                    if (currentQuestionIndex > 0) {
                        currentQuestionIndex--;
                        renderQuestion();
                    }
                }
            });

            $("#next-btn").dxButton({
                text: "Next",
                visible: currentQuestionIndex < questions.length - 1,
                onClick: () => {
                    if (currentQuestionIndex < questions.length - 1) {
                        currentQuestionIndex++;
                        renderQuestion();
                    }
                }
            });

            $("#submit-btn").dxButton({
                text: "Submit",
                stylingMode: "contained",
                type: "success",
                visible: currentQuestionIndex === questions.length - 1,
                onClick: function () {
                    let unansweredQuestions = questions.filter(q => !userAnswers[q.questionId]);

                    if (unansweredQuestions.length > 0) {
                        alert('Please answer all the questions before submitting.');
                        return;
                    }

                    let form = $("#quiz-form");
                    form.find("input[type=hidden]").remove();

                    questions.forEach((question, index) => {
                        form.append(`<input type="hidden" name="[${index}].QuestionId" value="${question.questionId}" />`);
                        form.append(`<input type="hidden" name="[${index}].Answer.ChoiceId" value="${userAnswers[question.questionId]}" />`);
                    });

                    form.submit();
                }
            });
        }

        $(function () {
            renderQuestion();
            startTimer();
        });
    </script>
}
