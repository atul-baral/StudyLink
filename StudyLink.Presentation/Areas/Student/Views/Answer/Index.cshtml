@model List<StudyLink.Application.ViewModels.AddAnswerVM>

@{
    ViewData["Title"] = "Quiz";
}

<h2>Quiz</h2>

<div id="timer" class="mt-4" style="font-size: 20px; font-weight: bold;">Time Remaining: <span id="timer-display">00:00</span></div>

<form id="quiz-form" action="@Url.Action("AddAnswer", "Answer")" method="post">
    <div id="question-container" class="mt-4"></div>
    <div id="navigation-buttons" class="mt-4">
        <div id="prev-btn"></div>
        <div id="next-btn"></div>
        <div id="submit-btn"></div>
    </div>
</form>

<div id="popup-container">
    <div class="popup-content">
        <h4 id="popup-message-title"></h4>
        <p id="popup-message-text"></p>
@*         <button id="yes-btn">Yes</button>
        <button id="no-btn">No</button> *@
    </div>
</div>

@section Scripts {
    <script>
        let questions = @Html.Raw(Json.Serialize(Model));
        let userAnswers = {};
        let currentQuestionIndex = 0;
        let countdownTimer;
        let timeLeftInSeconds = 10; // 10 second
        let popupInstance;

        function updateTimer() {
            let minutes = Math.floor(timeLeftInSeconds / 60);
            let seconds = timeLeftInSeconds % 60;
            $("#timer-display").text(`${minutes < 10 ? '0' : ''}${minutes}:${seconds < 10 ? '0' : ''}${seconds}`);

            if (timeLeftInSeconds <= 0) {
                clearInterval(countdownTimer);
                handleTimeout();
            } else {
                timeLeftInSeconds--;
            }
        }

        function startTimer() {
            countdownTimer = setInterval(updateTimer, 1000);
        }

        function setUnansweredQuestionsToZero() {
            questions.forEach((question, index) => {
                if (!userAnswers[question.questionId]) {
                    userAnswers[question.questionId] = ''; 
                }
            });
        }

        function saveAnswers() {
            let form = $("#quiz-form");
            form.find("input[type=hidden]").remove();
            questions.forEach((question, index) => {
                form.append(`<input type="hidden" name="[${index}].QuestionId" value="${question.questionId}" />`);
                form.append(`<input type="hidden" name="[${index}].Answer.ChoiceId" value="${userAnswers[question.questionId]}" />`);
            });
            form.submit();
            window.isSubmitted = true;
        }

        function showPopup(title, message, isTimeUp = false) {
            $("#popup-message-title").text(title);
            $("#popup-message-text").text(message);

            if (isTimeUp) {
                popupInstance.option({
                    contentTemplate: function () {
                        let contentDiv = $("<div>").append(
                            $("<h4>").text(title),
                            $("<p>").text(message)
                        );
                        return contentDiv;
                    },
                    showCloseButton: false
                });

                setTimeout(function() {
                    setUnansweredQuestionsToZero();
                    saveAnswers();
                    window.isSubmitted = true;
                }, 10000);
            }
            else {
                popupInstance.option("contentTemplate", function () {
                    let contentDiv = $("<div>").append(
                        $("<h4>").text(title),
                        $("<p>").text(message),
                        $("<div>").dxButton({
                            text: "Yes",
                            onClick: function () {
                                setUnansweredQuestionsToZero();
                                saveAnswers();
                                window.isSubmitted = true;
                            }
                        }),
                        $("<div>").dxButton({
                            text: "No",
                            onClick: function () {
                                popupInstance.option("visible", false);
                            }
                        })
                    );
                    return contentDiv;
                });
            }

            popupInstance.option("visible", true);
        }

        function handleTimeout() {
            showPopup("Time's up!", "Your time has expired. The quiz will be submitted automatically.", true);
        }

        function handleIncompleteAnswers() {
            showPopup("Incomplete Answers", "You have unanswered questions, but we will submit them for you.");
        }

        function renderQuestion() {
            let question = questions[currentQuestionIndex];
            let questionHtml = `
                <div class="card mb-4">
                    <div class="card-header">
                        <strong>Q${currentQuestionIndex + 1}: </strong>${question.questionText}
                    </div>
                    <div class="card-body">
                        <div id="radio-group-${question.questionId}" class="row"></div>
                    </div>
                </div>
            `;
            $("#question-container").html(questionHtml);

            $(`#radio-group-${question.questionId}`).dxRadioGroup({
                items: question.choices.map((choice, index) => ({
                    value: choice.choiceId,
                    text: `${String.fromCharCode(65 + index)}. ${choice.choiceText}`
                })),
                displayExpr: "text",
                valueExpr: "value",
                value: userAnswers[question.questionId] || null,
                onValueChanged: (e) => userAnswers[question.questionId] = e.value
            });

            $("#prev-btn").dxButton({
                text: "Previous",
                visible: currentQuestionIndex > 0,
                onClick: () => { if (currentQuestionIndex > 0) currentQuestionIndex--; renderQuestion(); }
            });

            $("#next-btn").dxButton({
                text: "Next",
                visible: currentQuestionIndex < questions.length - 1,
                onClick: () => { if (currentQuestionIndex < questions.length - 1) currentQuestionIndex++; renderQuestion(); }
            });

            $("#submit-btn").dxButton({
                text: "Submit",
                stylingMode: "contained",
                type: "success",
                visible: currentQuestionIndex === questions.length - 1,
                onClick: () => {
                    let unansweredQuestions = questions.filter(q => !userAnswers[q.questionId]);
                    if (unansweredQuestions.length > 0) {
                        handleIncompleteAnswers();
                        return;
                    }

                    saveAnswers();
                }
            });
        }

        $(function () {
            renderQuestion();
            startTimer();
            popupInstance = $("#popup-container").dxPopup({
                visible: false,
                dragEnabled: true,
                closeOnOutsideClick: false,
                showTitle: true,
                title: "Notice",
                width: 400,
                height: 220
            }).dxPopup("instance");
        });
    </script>
}
